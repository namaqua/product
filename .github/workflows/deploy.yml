name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            engines/package-lock.json
            admin/package-lock.json
      
      - name: Install backend dependencies
        working-directory: ./engines
        run: npm ci
      
      - name: Run backend tests
        working-directory: ./engines
        run: npm test
      
      - name: Install frontend dependencies
        working-directory: ./admin
        run: npm ci
      
      - name: Run frontend tests
        working-directory: ./admin
        run: npm test -- --run

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./engines
          file: ./engines/Dockerfile.production
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./admin
          file: ./admin/Dockerfile.production
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          build-args: |
            VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.DEPLOY_HOST_KEY }}" >> ~/.ssh/known_hosts
      
      - name: Deploy to DigitalOcean
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          # Copy docker-compose and configs
          scp -i ~/.ssh/deploy_key \
            docker-compose.production.yml \
            $DEPLOY_USER@$DEPLOY_HOST:~/app/
          
          # Deploy on server
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
            cd ~/app
            
            # Pull latest images
            docker compose -f docker-compose.production.yml pull
            
            # Stop old containers
            docker compose -f docker-compose.production.yml down
            
            # Start new containers
            docker compose -f docker-compose.production.yml up -d
            
            # Run migrations
            docker compose -f docker-compose.production.yml exec -T api npm run migration:run
            
            # Health check
            sleep 10
            curl -f http://localhost:3010/health || exit 1
          ENDSSH
      
      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: 'true'
