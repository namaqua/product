version: '3.8'

name: product-production

services:
  # PostgreSQL Database
  postgres-product:
    image: postgres:15-alpine
    container_name: postgres-product
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis-product:
    image: redis:7-alpine
    container_name: redis-product
    restart: always
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - product-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # NestJS API
  api:
    build:
      context: ./engines
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
    container_name: product-api
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3010
      DB_HOST: postgres-product
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis-product
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "127.0.0.1:3010:3010"
    depends_on:
      postgres-product:
        condition: service_healthy
      redis-product:
        condition: service_healthy
    networks:
      - product-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # React Frontend
  frontend:
    build:
      context: ./admin
      dockerfile: Dockerfile.production
      args:
        VITE_API_URL: ${API_URL}
        NODE_ENV: production
    container_name: product-frontend
    restart: always
    ports:
      - "127.0.0.1:3000:80"
    networks:
      - product-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Elasticsearch (Optional - comment out if not needed initially)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
  #   container_name: elasticsearch-product
  #   restart: always
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=true
  #     - xpack.security.enrollment.enabled=false
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - bootstrap.memory_lock=true
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   networks:
  #     - product-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1G
  #       reservations:
  #         memory: 512M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  # elasticsearch_data:
  #   driver: local

networks:
  product-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
